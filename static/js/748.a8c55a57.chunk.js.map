{"version":3,"file":"static/js/748.a8c55a57.chunk.js","mappings":"wUAIaA,EAAYC,EAAAA,GAAAA,IAAH,0IAQTC,EAAOD,EAAAA,GAAAA,KAAH,6CAIJE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,qMAWVI,EAAgBJ,EAAAA,GAAAA,OAAH,gVAiBbK,GAAkBL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,2PAefO,EAAOP,EAAAA,GAAAA,GAAH,6CAIJQ,EAAOR,EAAAA,GAAAA,GAAH,6EAMJS,GAAWT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,qE,mBCnDfW,EAAgB,CACpBC,aAAc,IAGVC,EAASC,EAAAA,KAAaC,MAAM,CAChCH,aAAcE,EAAAA,KAEXE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAGC,SAASC,IACtB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAQT,EAAaU,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCAId,2FACEP,GAAW,GADb,mBAGuBQ,EAAAA,EAAAA,IAAgBL,GAHvC,OAGUN,EAHV,OAIIC,EAAQD,EAAKY,SAJjB,gDAMIP,EAAS,EAAD,IANZ,yBAQIF,GAAW,GARf,6EAJc,sBACTG,GADS,mCAedO,EACD,GAAE,CAACP,IAOJ,OACE,SAAC7B,EAAD,WACE,UAACF,EAAD,YACE,SAAC,KAAD,CACEY,cAAeA,EACf2B,iBAAkBzB,EAClB0B,SAXa,SAAC,EAAD,GAAsC,IAAnC3B,EAAkC,EAAlCA,aAAkB4B,EAAgB,EAAhBA,UACxClB,EAAgB,CAAEQ,MAAOlB,IACzB4B,GACD,EAKK,UAKE,UAACtC,EAAD,YACE,SAACG,EAAD,CACEoC,KAAK,OACLC,KAAK,eACLC,YAAY,mBAEd,SAAC,KAAD,CAAcD,KAAK,kBACnB,SAACtC,EAAD,CAAeqC,KAAK,SAApB,UACE,SAAC,MAAD,WAKLf,IAAW,SAAC,KAAD,CAAckB,MAAM,SACf,IAAhBpB,EAAKqB,SAAiBjB,IACrB,SAACrB,EAAD,UACGiB,EAAKsB,KAAI,SAAAtB,GAAI,OACZ,SAAChB,EAAD,WACE,SAACC,EAAD,CAAUsC,GAAE,kBAAavB,EAAKwB,IAAMC,MAAO,CAAEC,KAAMlB,GAAnD,SACGR,EAAK2B,OAAS3B,EAAKkB,QAFblB,EAAKwB,GADJ,UAYzB,C","sources":["pages/MoviesPage/MoviesPage.styled.js","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  max-width: 1170px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n\nexport const Main = styled.main`\n  margin-top: 25px;\n`;\n\nexport const SearchForm = styled(Form)`\n  outline: 1px solid;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 300px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormBtn = styled.button`\n  display: inline-block;\n  width: 32px;\n  height: 32px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormInput = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 15px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const List = styled.ul`\n  margin-top: 25px;\n`;\n\nexport const Item = styled.li`\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const ItemLink = styled(Link)`\n  text-decoration: none;\n  color: #212121;\n`;","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { getMovieByQuery } from 'services/movies-api';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { InfinitySpin } from 'react-loader-spinner';\nimport {\n  Container,\n  Main,\n  SearchForm,\n  SearchFormBtn,\n  SearchFormInput,\n  List,\n  Item,\n  ItemLink,\n} from './MoviesPage.styled';\nimport { FaSearch } from 'react-icons/fa';\n\nconst initialValues = {\n  searchMovies: '',\n};\n\nconst schema = yup.object().shape({\n  searchMovies: yup\n    .string()\n    .min(2, 'Too Short!')\n    .max(70, 'Too Long!')\n    .required('Required'),\n});\n\nexport default function MoviesPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [item, setItem] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const query = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    async function fetchItem() {\n      setLoading(true);\n      try {\n        const item = await getMovieByQuery(query);\n        setItem(item.results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchItem();\n  }, [query]);\n\n  const handleSubmit = ({ searchMovies }, { resetForm }) => {\n    setSearchParams({ query: searchMovies });\n    resetForm();\n  };\n\n  return (\n    <Main>\n      <Container>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          onSubmit={handleSubmit}\n        >\n          <SearchForm>\n            <SearchFormInput\n              type=\"text\"\n              name=\"searchMovies\"\n              placeholder=\"Search movies\"\n            />\n            <ErrorMessage name=\"searchMovies\" />\n            <SearchFormBtn type=\"submit\">\n              <FaSearch />\n            </SearchFormBtn>\n          </SearchForm>\n        </Formik>\n\n        {loading && <InfinitySpin color=\"grey\" />}\n        {item.length !== 0 && !error && (\n          <List>\n            {item.map(item => (\n              <Item key={item.id}>\n                <ItemLink to={`/movies/${item.id}`} state={{ from: location }}>\n                  {item.title || item.name}\n                </ItemLink>\n              </Item>\n            ))}\n          </List>\n        )}\n      </Container>\n    </Main>\n  );\n}"],"names":["Container","styled","Main","SearchForm","Form","SearchFormBtn","SearchFormInput","Field","List","Item","ItemLink","Link","initialValues","searchMovies","schema","yup","shape","min","max","required","MoviesPage","useSearchParams","searchParams","setSearchParams","useState","item","setItem","loading","setLoading","error","setError","query","get","location","useLocation","useEffect","getMovieByQuery","results","fetchItem","validationSchema","onSubmit","resetForm","type","name","placeholder","color","length","map","to","id","state","from","title"],"sourceRoot":""}